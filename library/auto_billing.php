<?php
/*
 * Automatic Insurance Billing on Checkout
 * Generated by GitHub Copilot
 * 
 * This script automatically submits claims to insurance when appointment status 
 * is changed to "Checked Out"
 */

require_once("../../interface/globals.php");
require_once("$srcdir/billing.inc");
require_once("$srcdir/forms.inc");
require_once("$srcdir/patient.inc");

/**
 * Auto-submit insurance claim when patient is checked out
 * @param int $encounter_id The encounter ID
 * @param int $patient_id The patient ID
 * @return bool Success status
 */
function auto_submit_insurance_claim($encounter_id, $patient_id) {
    global $pid;
    
    try {
        // Verify the encounter exists and is ready for billing
        $encounter = sqlQuery("SELECT * FROM form_encounter WHERE encounter = ? AND pid = ?", 
                             array($encounter_id, $patient_id));
        
        if (!$encounter) {
            error_log("Auto Billing: Encounter $encounter_id not found for patient $patient_id");
            return false;
        }
        
        // Check if patient has insurance
        $insurance = sqlQuery("SELECT * FROM insurance_data WHERE pid = ? AND type = 'primary' ORDER BY date DESC LIMIT 1", 
                             array($patient_id));
        
        if (!$insurance || empty($insurance['provider'])) {
            error_log("Auto Billing: No primary insurance found for patient $patient_id");
            return false;
        }
        
        // Check if there are billable charges
        $charges = sqlStatement("SELECT * FROM billing WHERE pid = ? AND encounter = ? AND code_type IN ('CPT4', 'HCPCS') AND activity = 1", 
                               array($patient_id, $encounter_id));
        
        if (sqlNumRows($charges) == 0) {
            error_log("Auto Billing: No billable charges found for encounter $encounter_id");
            return false;
        }
        
        // Check if already billed
        $existing_claim = sqlQuery("SELECT * FROM claims WHERE patient_id = ? AND encounter_id = ?", 
                                  array($patient_id, $encounter_id));
        
        if ($existing_claim) {
            error_log("Auto Billing: Claim already exists for encounter $encounter_id");
            return false;
        }
        
        // Generate and submit the claim
        $claim_id = create_insurance_claim($patient_id, $encounter_id);
        
        if ($claim_id) {
            // Mark as submitted
            sqlStatement("UPDATE claims SET status = 1, submitted_time = NOW() WHERE claim_id = ?", 
                        array($claim_id));
            
            // Log the auto-submission
            sqlStatement("INSERT INTO billing_log (pid, encounter, action, user, timestamp) VALUES (?, ?, 'AUTO_SUBMIT_INSURANCE', 'system', NOW())", 
                        array($patient_id, $encounter_id));
            
            error_log("Auto Billing: Successfully created claim $claim_id for encounter $encounter_id");
            return true;
        }
        
        return false;
        
    } catch (Exception $e) {
        error_log("Auto Billing Error: " . $e->getMessage());
        return false;
    }
}

/**
 * Create insurance claim
 */
function create_insurance_claim($patient_id, $encounter_id) {
    // Get next claim number
    $claim_number = generate_claim_number();
    
    // Insert claim record
    $claim_sql = "INSERT INTO claims (patient_id, encounter_id, version, status, payer_id, payer_type, bill_date, process_date, process_time, target, x12_partner, submitted_time) 
                  VALUES (?, ?, 1, 1, (SELECT provider FROM insurance_data WHERE pid = ? AND type = 'primary' ORDER BY date DESC LIMIT 1), 1, NOW(), NOW(), NOW(), 'X12', '', NOW())";
    
    $claim_id = sqlInsert($claim_sql, array($patient_id, $encounter_id, $patient_id));
    
    return $claim_id;
}

/**
 * Generate unique claim number
 */
function generate_claim_number() {
    $prefix = "AUTO";
    $timestamp = date('YmdHis');
    $random = rand(1000, 9999);
    return $prefix . $timestamp . $random;
}

/**
 * Hook into appointment status change
 * This function should be called when appointment status changes
 */
function handle_appointment_status_change($event_id, $new_status, $patient_id = null, $encounter_id = null) {
    
    // Check if status is "Checked Out" (status may vary - check your OpenEMR setup)
    $checkout_statuses = array('>', 'CO', 'CHECKOUT', 'CHECKED_OUT', '3'); // Common checkout status values
    
    if (in_array($new_status, $checkout_statuses)) {
        
        // If encounter_id not provided, try to find it from the appointment
        if (!$encounter_id && $patient_id) {
            $encounter = sqlQuery("SELECT encounter FROM form_encounter WHERE pid = ? AND date = (SELECT pc_eventDate FROM openemr_postcalendar_events WHERE pc_eid = ?) ORDER BY date DESC LIMIT 1", 
                                 array($patient_id, $event_id));
            if ($encounter) {
                $encounter_id = $encounter['encounter'];
            }
        }
        
        // If patient_id not provided, get it from appointment
        if (!$patient_id) {
            $appointment = sqlQuery("SELECT pc_pid FROM openemr_postcalendar_events WHERE pc_eid = ?", array($event_id));
            if ($appointment) {
                $patient_id = $appointment['pc_pid'];
            }
        }
        
        if ($patient_id && $encounter_id) {
            error_log("Auto Billing: Processing checkout for Patient $patient_id, Encounter $encounter_id");
            return auto_submit_insurance_claim($encounter_id, $patient_id);
        } else {
            error_log("Auto Billing: Missing patient_id or encounter_id for event $event_id");
            return false;
        }
    }
    
    return true; // Return true for non-checkout status changes
}

// If called directly (for testing)
if (php_sapi_name() === 'cli' && isset($argv[1]) && isset($argv[2])) {
    $encounter_id = $argv[1];
    $patient_id = $argv[2];
    $result = auto_submit_insurance_claim($encounter_id, $patient_id);
    echo $result ? "Success\n" : "Failed\n";
}

/* END AI-GENERATED CODE */
?>